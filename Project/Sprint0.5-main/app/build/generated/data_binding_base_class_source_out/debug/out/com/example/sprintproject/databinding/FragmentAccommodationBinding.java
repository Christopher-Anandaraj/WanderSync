// Generated by view binder compiler. Do not edit!
package com.example.sprintproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sprintproject.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAccommodationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TableLayout accommodationAdd;

  @NonNull
  public final TextView accommodationCheckIn;

  @NonNull
  public final EditText accommodationCheckInDate;

  @NonNull
  public final TextView accommodationCheckOut;

  @NonNull
  public final EditText accommodationCheckOutDate;

  @NonNull
  public final ListView accommodationList;

  @NonNull
  public final TableLayout accommodationTable;

  @NonNull
  public final ImageButton buttonAddAccommodation;

  @NonNull
  public final Button buttonCancelAccommodation;

  @NonNull
  public final Button buttonConfirmAccommodation;

  @NonNull
  public final ConstraintLayout fragmentAccommodation;

  @NonNull
  public final EditText roomsNumber;

  @NonNull
  public final EditText roomsType;

  @NonNull
  public final TextView textAccommodation;

  @NonNull
  public final TextView textAccommodationLocation;

  @NonNull
  public final TextView textRoomType;

  @NonNull
  public final TextView textRooms;

  private FragmentAccommodationBinding(@NonNull ConstraintLayout rootView,
      @NonNull TableLayout accommodationAdd, @NonNull TextView accommodationCheckIn,
      @NonNull EditText accommodationCheckInDate, @NonNull TextView accommodationCheckOut,
      @NonNull EditText accommodationCheckOutDate, @NonNull ListView accommodationList,
      @NonNull TableLayout accommodationTable, @NonNull ImageButton buttonAddAccommodation,
      @NonNull Button buttonCancelAccommodation, @NonNull Button buttonConfirmAccommodation,
      @NonNull ConstraintLayout fragmentAccommodation, @NonNull EditText roomsNumber,
      @NonNull EditText roomsType, @NonNull TextView textAccommodation,
      @NonNull TextView textAccommodationLocation, @NonNull TextView textRoomType,
      @NonNull TextView textRooms) {
    this.rootView = rootView;
    this.accommodationAdd = accommodationAdd;
    this.accommodationCheckIn = accommodationCheckIn;
    this.accommodationCheckInDate = accommodationCheckInDate;
    this.accommodationCheckOut = accommodationCheckOut;
    this.accommodationCheckOutDate = accommodationCheckOutDate;
    this.accommodationList = accommodationList;
    this.accommodationTable = accommodationTable;
    this.buttonAddAccommodation = buttonAddAccommodation;
    this.buttonCancelAccommodation = buttonCancelAccommodation;
    this.buttonConfirmAccommodation = buttonConfirmAccommodation;
    this.fragmentAccommodation = fragmentAccommodation;
    this.roomsNumber = roomsNumber;
    this.roomsType = roomsType;
    this.textAccommodation = textAccommodation;
    this.textAccommodationLocation = textAccommodationLocation;
    this.textRoomType = textRoomType;
    this.textRooms = textRooms;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAccommodationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAccommodationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_accommodation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAccommodationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accommodation_add;
      TableLayout accommodationAdd = ViewBindings.findChildViewById(rootView, id);
      if (accommodationAdd == null) {
        break missingId;
      }

      id = R.id.accommodation_check_in;
      TextView accommodationCheckIn = ViewBindings.findChildViewById(rootView, id);
      if (accommodationCheckIn == null) {
        break missingId;
      }

      id = R.id.accommodation_check_in_date;
      EditText accommodationCheckInDate = ViewBindings.findChildViewById(rootView, id);
      if (accommodationCheckInDate == null) {
        break missingId;
      }

      id = R.id.accommodation_check_out;
      TextView accommodationCheckOut = ViewBindings.findChildViewById(rootView, id);
      if (accommodationCheckOut == null) {
        break missingId;
      }

      id = R.id.accommodation_check_out_date;
      EditText accommodationCheckOutDate = ViewBindings.findChildViewById(rootView, id);
      if (accommodationCheckOutDate == null) {
        break missingId;
      }

      id = R.id.accommodation_list;
      ListView accommodationList = ViewBindings.findChildViewById(rootView, id);
      if (accommodationList == null) {
        break missingId;
      }

      id = R.id.accommodation_table;
      TableLayout accommodationTable = ViewBindings.findChildViewById(rootView, id);
      if (accommodationTable == null) {
        break missingId;
      }

      id = R.id.button_add_accommodation;
      ImageButton buttonAddAccommodation = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddAccommodation == null) {
        break missingId;
      }

      id = R.id.button_cancel_accommodation;
      Button buttonCancelAccommodation = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancelAccommodation == null) {
        break missingId;
      }

      id = R.id.button_confirm_accommodation;
      Button buttonConfirmAccommodation = ViewBindings.findChildViewById(rootView, id);
      if (buttonConfirmAccommodation == null) {
        break missingId;
      }

      ConstraintLayout fragmentAccommodation = (ConstraintLayout) rootView;

      id = R.id.rooms_number;
      EditText roomsNumber = ViewBindings.findChildViewById(rootView, id);
      if (roomsNumber == null) {
        break missingId;
      }

      id = R.id.rooms_type;
      EditText roomsType = ViewBindings.findChildViewById(rootView, id);
      if (roomsType == null) {
        break missingId;
      }

      id = R.id.text_accommodation;
      TextView textAccommodation = ViewBindings.findChildViewById(rootView, id);
      if (textAccommodation == null) {
        break missingId;
      }

      id = R.id.text_accommodation_location;
      TextView textAccommodationLocation = ViewBindings.findChildViewById(rootView, id);
      if (textAccommodationLocation == null) {
        break missingId;
      }

      id = R.id.text_room_type;
      TextView textRoomType = ViewBindings.findChildViewById(rootView, id);
      if (textRoomType == null) {
        break missingId;
      }

      id = R.id.text_rooms;
      TextView textRooms = ViewBindings.findChildViewById(rootView, id);
      if (textRooms == null) {
        break missingId;
      }

      return new FragmentAccommodationBinding((ConstraintLayout) rootView, accommodationAdd,
          accommodationCheckIn, accommodationCheckInDate, accommodationCheckOut,
          accommodationCheckOutDate, accommodationList, accommodationTable, buttonAddAccommodation,
          buttonCancelAccommodation, buttonConfirmAccommodation, fragmentAccommodation, roomsNumber,
          roomsType, textAccommodation, textAccommodationLocation, textRoomType, textRooms);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
